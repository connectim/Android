package connect.db.green.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import connect.db.green.bean.CAddressEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CADDRESS_ENTITY".
*/
public class CAddressEntityDao extends AbstractDao<CAddressEntity, Long> {

    public static final String TABLENAME = "CADDRESS_ENTITY";

    /**
     * Properties of entity CAddressEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property BaseSeedEncryption = new Property(1, String.class, "baseSeedEncryption", false, "BASE_SEED_ENCRYPTION");
        public final static Property BaseSeedSalt = new Property(2, String.class, "baseSeedSalt", false, "BASE_SEED_SALT");
        public final static Property Currency_salt = new Property(3, String.class, "currency_salt", false, "CURRENCY_SALT");
        public final static Property Currency_index = new Property(4, String.class, "currency_index", false, "CURRENCY_INDEX");
        public final static Property Currency_code = new Property(5, Integer.class, "currency_code", false, "CURRENCY_CODE");
        public final static Property Currency_status = new Property(6, Integer.class, "currency_status", false, "CURRENCY_STATUS");
        public final static Property Currency_switch = new Property(7, Integer.class, "currency_switch", false, "CURRENCY_SWITCH");
        public final static Property Currency_balance = new Property(8, Long.class, "currency_balance", false, "CURRENCY_BALANCE");
    }


    public CAddressEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CAddressEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CADDRESS_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"BASE_SEED_ENCRYPTION\" TEXT," + // 1: baseSeedEncryption
                "\"BASE_SEED_SALT\" TEXT," + // 2: baseSeedSalt
                "\"CURRENCY_SALT\" TEXT," + // 3: currency_salt
                "\"CURRENCY_INDEX\" TEXT," + // 4: currency_index
                "\"CURRENCY_CODE\" INTEGER," + // 5: currency_code
                "\"CURRENCY_STATUS\" INTEGER," + // 6: currency_status
                "\"CURRENCY_SWITCH\" INTEGER," + // 7: currency_switch
                "\"CURRENCY_BALANCE\" INTEGER);"); // 8: currency_balance
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CADDRESS_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CAddressEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String baseSeedEncryption = entity.getBaseSeedEncryption();
        if (baseSeedEncryption != null) {
            stmt.bindString(2, baseSeedEncryption);
        }
 
        String baseSeedSalt = entity.getBaseSeedSalt();
        if (baseSeedSalt != null) {
            stmt.bindString(3, baseSeedSalt);
        }
 
        String currency_salt = entity.getCurrency_salt();
        if (currency_salt != null) {
            stmt.bindString(4, currency_salt);
        }
 
        String currency_index = entity.getCurrency_index();
        if (currency_index != null) {
            stmt.bindString(5, currency_index);
        }
 
        Integer currency_code = entity.getCurrency_code();
        if (currency_code != null) {
            stmt.bindLong(6, currency_code);
        }
 
        Integer currency_status = entity.getCurrency_status();
        if (currency_status != null) {
            stmt.bindLong(7, currency_status);
        }
 
        Integer currency_switch = entity.getCurrency_switch();
        if (currency_switch != null) {
            stmt.bindLong(8, currency_switch);
        }
 
        Long currency_balance = entity.getCurrency_balance();
        if (currency_balance != null) {
            stmt.bindLong(9, currency_balance);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CAddressEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String baseSeedEncryption = entity.getBaseSeedEncryption();
        if (baseSeedEncryption != null) {
            stmt.bindString(2, baseSeedEncryption);
        }
 
        String baseSeedSalt = entity.getBaseSeedSalt();
        if (baseSeedSalt != null) {
            stmt.bindString(3, baseSeedSalt);
        }
 
        String currency_salt = entity.getCurrency_salt();
        if (currency_salt != null) {
            stmt.bindString(4, currency_salt);
        }
 
        String currency_index = entity.getCurrency_index();
        if (currency_index != null) {
            stmt.bindString(5, currency_index);
        }
 
        Integer currency_code = entity.getCurrency_code();
        if (currency_code != null) {
            stmt.bindLong(6, currency_code);
        }
 
        Integer currency_status = entity.getCurrency_status();
        if (currency_status != null) {
            stmt.bindLong(7, currency_status);
        }
 
        Integer currency_switch = entity.getCurrency_switch();
        if (currency_switch != null) {
            stmt.bindLong(8, currency_switch);
        }
 
        Long currency_balance = entity.getCurrency_balance();
        if (currency_balance != null) {
            stmt.bindLong(9, currency_balance);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CAddressEntity readEntity(Cursor cursor, int offset) {
        CAddressEntity entity = new CAddressEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // baseSeedEncryption
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // baseSeedSalt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // currency_salt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // currency_index
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // currency_code
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // currency_status
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // currency_switch
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // currency_balance
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CAddressEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBaseSeedEncryption(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBaseSeedSalt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCurrency_salt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCurrency_index(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCurrency_code(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCurrency_status(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCurrency_switch(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCurrency_balance(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CAddressEntity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CAddressEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CAddressEntity entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
