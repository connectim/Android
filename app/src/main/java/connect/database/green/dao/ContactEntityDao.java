package connect.database.green.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import connect.database.green.bean.ContactEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_ENTITY".
*/
public class ContactEntityDao extends AbstractDao<ContactEntity, Long> {

    public static final String TABLENAME = "CONTACT_ENTITY";

    /**
     * Properties of entity ContactEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Pub_key = new Property(1, String.class, "pub_key", false, "PUB_KEY");
        public final static Property Uid = new Property(2, String.class, "uid", false, "UID");
        public final static Property ConnectId = new Property(3, String.class, "connectId", false, "CONNECT_ID");
        public final static Property Username = new Property(4, String.class, "username", false, "USERNAME");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property Common = new Property(7, Integer.class, "common", false, "COMMON");
        public final static Property Source = new Property(8, Integer.class, "source", false, "SOURCE");
        public final static Property Blocked = new Property(9, Boolean.class, "blocked", false, "BLOCKED");
    }


    public ContactEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ContactEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"PUB_KEY\" TEXT NOT NULL UNIQUE ," + // 1: pub_key
                "\"UID\" TEXT," + // 2: uid
                "\"CONNECT_ID\" TEXT," + // 3: connectId
                "\"USERNAME\" TEXT," + // 4: username
                "\"AVATAR\" TEXT," + // 5: avatar
                "\"REMARK\" TEXT," + // 6: remark
                "\"COMMON\" INTEGER," + // 7: common
                "\"SOURCE\" INTEGER," + // 8: source
                "\"BLOCKED\" INTEGER);"); // 9: blocked
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getPub_key());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String connectId = entity.getConnectId();
        if (connectId != null) {
            stmt.bindString(4, connectId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(5, username);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        Integer common = entity.getCommon();
        if (common != null) {
            stmt.bindLong(8, common);
        }
 
        Integer source = entity.getSource();
        if (source != null) {
            stmt.bindLong(9, source);
        }
 
        Boolean blocked = entity.getBlocked();
        if (blocked != null) {
            stmt.bindLong(10, blocked ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getPub_key());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String connectId = entity.getConnectId();
        if (connectId != null) {
            stmt.bindString(4, connectId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(5, username);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        Integer common = entity.getCommon();
        if (common != null) {
            stmt.bindLong(8, common);
        }
 
        Integer source = entity.getSource();
        if (source != null) {
            stmt.bindLong(9, source);
        }
 
        Boolean blocked = entity.getBlocked();
        if (blocked != null) {
            stmt.bindLong(10, blocked ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ContactEntity readEntity(Cursor cursor, int offset) {
        ContactEntity entity = new ContactEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getString(offset + 1), // pub_key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // connectId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // username
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // common
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // source
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // blocked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPub_key(cursor.getString(offset + 1));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setConnectId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUsername(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCommon(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSource(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setBlocked(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ContactEntity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ContactEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactEntity entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
