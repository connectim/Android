package connect.database.green.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import connect.database.green.bean.OrganizerEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORGANIZER_ENTITY".
*/
public class OrganizerEntityDao extends AbstractDao<OrganizerEntity, Long> {

    public static final String TABLENAME = "ORGANIZER_ENTITY";

    /**
     * Properties of entity OrganizerEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property UpperId = new Property(1, long.class, "upperId", false, "UPPER_ID");
        public final static Property Id = new Property(2, Long.class, "id", false, "ID");
        public final static Property Count = new Property(3, Long.class, "count", false, "COUNT");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property O_u = new Property(5, String.class, "o_u", false, "O_U");
        public final static Property Uid = new Property(6, String.class, "uid", false, "UID");
        public final static Property Avatar = new Property(7, String.class, "avatar", false, "AVATAR");
        public final static Property Pub_key = new Property(8, String.class, "pub_key", false, "PUB_KEY");
        public final static Property Registed = new Property(9, Boolean.class, "registed", false, "REGISTED");
        public final static Property EmpNo = new Property(10, String.class, "empNo", false, "EMP_NO");
        public final static Property Mobile = new Property(11, String.class, "mobile", false, "MOBILE");
        public final static Property Gender = new Property(12, Integer.class, "gender", false, "GENDER");
        public final static Property Tips = new Property(13, String.class, "tips", false, "TIPS");
    }


    public OrganizerEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OrganizerEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORGANIZER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"UPPER_ID\" INTEGER NOT NULL ," + // 1: upperId
                "\"ID\" INTEGER," + // 2: id
                "\"COUNT\" INTEGER," + // 3: count
                "\"NAME\" TEXT," + // 4: name
                "\"O_U\" TEXT," + // 5: o_u
                "\"UID\" TEXT," + // 6: uid
                "\"AVATAR\" TEXT," + // 7: avatar
                "\"PUB_KEY\" TEXT," + // 8: pub_key
                "\"REGISTED\" INTEGER," + // 9: registed
                "\"EMP_NO\" TEXT," + // 10: empNo
                "\"MOBILE\" TEXT," + // 11: mobile
                "\"GENDER\" INTEGER," + // 12: gender
                "\"TIPS\" TEXT);"); // 13: tips
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORGANIZER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrganizerEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getUpperId());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        Long count = entity.getCount();
        if (count != null) {
            stmt.bindLong(4, count);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String o_u = entity.getO_u();
        if (o_u != null) {
            stmt.bindString(6, o_u);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(7, uid);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
 
        String pub_key = entity.getPub_key();
        if (pub_key != null) {
            stmt.bindString(9, pub_key);
        }
 
        Boolean registed = entity.getRegisted();
        if (registed != null) {
            stmt.bindLong(10, registed ? 1L: 0L);
        }
 
        String empNo = entity.getEmpNo();
        if (empNo != null) {
            stmt.bindString(11, empNo);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(12, mobile);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(13, gender);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(14, tips);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrganizerEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getUpperId());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        Long count = entity.getCount();
        if (count != null) {
            stmt.bindLong(4, count);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String o_u = entity.getO_u();
        if (o_u != null) {
            stmt.bindString(6, o_u);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(7, uid);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
 
        String pub_key = entity.getPub_key();
        if (pub_key != null) {
            stmt.bindString(9, pub_key);
        }
 
        Boolean registed = entity.getRegisted();
        if (registed != null) {
            stmt.bindLong(10, registed ? 1L: 0L);
        }
 
        String empNo = entity.getEmpNo();
        if (empNo != null) {
            stmt.bindString(11, empNo);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(12, mobile);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(13, gender);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(14, tips);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrganizerEntity readEntity(Cursor cursor, int offset) {
        OrganizerEntity entity = new OrganizerEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getLong(offset + 1), // upperId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // count
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // o_u
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // uid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // avatar
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pub_key
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // registed
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // empNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mobile
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // gender
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // tips
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrganizerEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUpperId(cursor.getLong(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCount(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setO_u(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAvatar(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPub_key(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRegisted(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setEmpNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMobile(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGender(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setTips(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrganizerEntity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrganizerEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrganizerEntity entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
