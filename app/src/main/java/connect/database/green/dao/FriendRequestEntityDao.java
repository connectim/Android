package connect.database.green.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import connect.database.green.bean.FriendRequestEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_REQUEST_ENTITY".
*/
public class FriendRequestEntityDao extends AbstractDao<FriendRequestEntity, Long> {

    public static final String TABLENAME = "FRIEND_REQUEST_ENTITY";

    /**
     * Properties of entity FriendRequestEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "AVATAR");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Tips = new Property(4, String.class, "tips", false, "TIPS");
        public final static Property Source = new Property(5, Integer.class, "source", false, "SOURCE");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
        public final static Property Read = new Property(7, Integer.class, "read", false, "READ");
    }


    public FriendRequestEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FriendRequestEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_REQUEST_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"UID\" TEXT NOT NULL ," + // 1: uid
                "\"AVATAR\" TEXT," + // 2: avatar
                "\"USERNAME\" TEXT," + // 3: username
                "\"TIPS\" TEXT," + // 4: tips
                "\"SOURCE\" INTEGER," + // 5: source
                "\"STATUS\" INTEGER," + // 6: status
                "\"READ\" INTEGER);"); // 7: read
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_REQUEST_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendRequestEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getUid());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(5, tips);
        }
 
        Integer source = entity.getSource();
        if (source != null) {
            stmt.bindLong(6, source);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        Integer read = entity.getRead();
        if (read != null) {
            stmt.bindLong(8, read);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendRequestEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getUid());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(5, tips);
        }
 
        Integer source = entity.getSource();
        if (source != null) {
            stmt.bindLong(6, source);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        Integer read = entity.getRead();
        if (read != null) {
            stmt.bindLong(8, read);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FriendRequestEntity readEntity(Cursor cursor, int offset) {
        FriendRequestEntity entity = new FriendRequestEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tips
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // source
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // read
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendRequestEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTips(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSource(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRead(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendRequestEntity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendRequestEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendRequestEntity entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
