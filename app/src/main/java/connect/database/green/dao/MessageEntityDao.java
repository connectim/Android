package connect.database.green.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import connect.database.green.bean.MessageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_ENTITY".
*/
public class MessageEntityDao extends AbstractDao<MessageEntity, Long> {

    public static final String TABLENAME = "MESSAGE_ENTITY";

    /**
     * Properties of entity MessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Message_ower = new Property(1, String.class, "message_ower", false, "MESSAGE_OWER");
        public final static Property Message_id = new Property(2, String.class, "message_id", false, "MESSAGE_ID");
        public final static Property ChatType = new Property(3, int.class, "chatType", false, "CHAT_TYPE");
        public final static Property Message_from = new Property(4, String.class, "message_from", false, "MESSAGE_FROM");
        public final static Property Message_to = new Property(5, String.class, "message_to", false, "MESSAGE_TO");
        public final static Property MessageType = new Property(6, int.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property TxtContent = new Property(8, String.class, "txtContent", false, "TXT_CONTENT");
        public final static Property Read_time = new Property(9, Long.class, "read_time", false, "READ_TIME");
        public final static Property Send_status = new Property(10, Integer.class, "send_status", false, "SEND_STATUS");
        public final static Property Createtime = new Property(11, Long.class, "createtime", false, "CREATETIME");
    }


    public MessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"MESSAGE_OWER\" TEXT NOT NULL ," + // 1: message_ower
                "\"MESSAGE_ID\" TEXT NOT NULL UNIQUE ," + // 2: message_id
                "\"CHAT_TYPE\" INTEGER NOT NULL ," + // 3: chatType
                "\"MESSAGE_FROM\" TEXT," + // 4: message_from
                "\"MESSAGE_TO\" TEXT," + // 5: message_to
                "\"MESSAGE_TYPE\" INTEGER NOT NULL ," + // 6: messageType
                "\"CONTENT\" TEXT," + // 7: content
                "\"TXT_CONTENT\" TEXT," + // 8: txtContent
                "\"READ_TIME\" INTEGER," + // 9: read_time
                "\"SEND_STATUS\" INTEGER," + // 10: send_status
                "\"CREATETIME\" INTEGER);"); // 11: createtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getMessage_ower());
        stmt.bindString(3, entity.getMessage_id());
        stmt.bindLong(4, entity.getChatType());
 
        String message_from = entity.getMessage_from();
        if (message_from != null) {
            stmt.bindString(5, message_from);
        }
 
        String message_to = entity.getMessage_to();
        if (message_to != null) {
            stmt.bindString(6, message_to);
        }
        stmt.bindLong(7, entity.getMessageType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String txtContent = entity.getTxtContent();
        if (txtContent != null) {
            stmt.bindString(9, txtContent);
        }
 
        Long read_time = entity.getRead_time();
        if (read_time != null) {
            stmt.bindLong(10, read_time);
        }
 
        Integer send_status = entity.getSend_status();
        if (send_status != null) {
            stmt.bindLong(11, send_status);
        }
 
        Long createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(12, createtime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getMessage_ower());
        stmt.bindString(3, entity.getMessage_id());
        stmt.bindLong(4, entity.getChatType());
 
        String message_from = entity.getMessage_from();
        if (message_from != null) {
            stmt.bindString(5, message_from);
        }
 
        String message_to = entity.getMessage_to();
        if (message_to != null) {
            stmt.bindString(6, message_to);
        }
        stmt.bindLong(7, entity.getMessageType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String txtContent = entity.getTxtContent();
        if (txtContent != null) {
            stmt.bindString(9, txtContent);
        }
 
        Long read_time = entity.getRead_time();
        if (read_time != null) {
            stmt.bindLong(10, read_time);
        }
 
        Integer send_status = entity.getSend_status();
        if (send_status != null) {
            stmt.bindLong(11, send_status);
        }
 
        Long createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(12, createtime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageEntity readEntity(Cursor cursor, int offset) {
        MessageEntity entity = new MessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getString(offset + 1), // message_ower
            cursor.getString(offset + 2), // message_id
            cursor.getInt(offset + 3), // chatType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // message_from
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // message_to
            cursor.getInt(offset + 6), // messageType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // txtContent
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // read_time
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // send_status
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // createtime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessage_ower(cursor.getString(offset + 1));
        entity.setMessage_id(cursor.getString(offset + 2));
        entity.setChatType(cursor.getInt(offset + 3));
        entity.setMessage_from(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessage_to(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMessageType(cursor.getInt(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTxtContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRead_time(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setSend_status(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCreatetime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageEntity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageEntity entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
