package connect.database.green.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import connect.database.green.bean.CurrencyAddressEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CURRENCY_ADDRESS_ENTITY".
*/
public class CurrencyAddressEntityDao extends AbstractDao<CurrencyAddressEntity, Long> {

    public static final String TABLENAME = "CURRENCY_ADDRESS_ENTITY";

    /**
     * Properties of entity CurrencyAddressEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Currency_code = new Property(1, String.class, "currency_code", false, "CURRENCY_CODE");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Address_index = new Property(3, Long.class, "address_index", false, "ADDRESS_INDEX");
        public final static Property Addresss_status = new Property(4, Integer.class, "addresss_status", false, "ADDRESSS_STATUS");
        public final static Property Address_balance = new Property(5, Long.class, "address_balance", false, "ADDRESS_BALANCE");
    }


    public CurrencyAddressEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CurrencyAddressEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CURRENCY_ADDRESS_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"CURRENCY_CODE\" TEXT," + // 1: currency_code
                "\"ADDRESS\" TEXT," + // 2: address
                "\"ADDRESS_INDEX\" INTEGER," + // 3: address_index
                "\"ADDRESSS_STATUS\" INTEGER," + // 4: addresss_status
                "\"ADDRESS_BALANCE\" INTEGER);"); // 5: address_balance
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CURRENCY_ADDRESS_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CurrencyAddressEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String currency_code = entity.getCurrency_code();
        if (currency_code != null) {
            stmt.bindString(2, currency_code);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        Long address_index = entity.getAddress_index();
        if (address_index != null) {
            stmt.bindLong(4, address_index);
        }
 
        Integer addresss_status = entity.getAddresss_status();
        if (addresss_status != null) {
            stmt.bindLong(5, addresss_status);
        }
 
        Long address_balance = entity.getAddress_balance();
        if (address_balance != null) {
            stmt.bindLong(6, address_balance);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CurrencyAddressEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String currency_code = entity.getCurrency_code();
        if (currency_code != null) {
            stmt.bindString(2, currency_code);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        Long address_index = entity.getAddress_index();
        if (address_index != null) {
            stmt.bindLong(4, address_index);
        }
 
        Integer addresss_status = entity.getAddresss_status();
        if (addresss_status != null) {
            stmt.bindLong(5, addresss_status);
        }
 
        Long address_balance = entity.getAddress_balance();
        if (address_balance != null) {
            stmt.bindLong(6, address_balance);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CurrencyAddressEntity readEntity(Cursor cursor, int offset) {
        CurrencyAddressEntity entity = new CurrencyAddressEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // currency_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // address_index
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // addresss_status
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // address_balance
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CurrencyAddressEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrency_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress_index(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setAddresss_status(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAddress_balance(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CurrencyAddressEntity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CurrencyAddressEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CurrencyAddressEntity entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
